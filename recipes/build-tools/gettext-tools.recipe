# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
import shutil
from cerbero.utils import shell

class Recipe(recipe.Recipe):
    name = 'gettext-tools'
    version = '0.19.8.1'
    licenses = [License.GPLv3]
    srcdir = 'gettext-tools'
    stype = SourceType.TARBALL
    tarball_dirname = 'gettext-%(version)s'
    url = 'http://ftp.gnu.org/pub/gnu/gettext/gettext-0.19.8.1.tar.gz'
    platform_deps = {
            Platform.DARWIN:  ['sed'],
            Platform.WINDOWS: ['libiconv', 'mingw-runtime', 'automake'],}
    configure_options = ' --disable-java --disable-csharp --disable-native-java --without-csv'
    patches = ['../gettext/0001-Fix-linker-error-redefinition-of-vasprintf.patch',
               '../gettext/0001-Undefine-__USE_MINGW_ANSI_STDIO-as-otherwise-stdio.h.patch',
               '../gettext/0001-Fix-build-invalid-instruction-on-macOS-10.13.patch' ]

    def prepare(self):
        if self.config.target_platform == Platform.WINDOWS:
            self.configure_options += ' --enable-threads=win32'
            self.append_env['LDFLAGS'] = '-liconv'

    def post_install(self):
        if self.config.platform == Platform.WINDOWS:
            # The msgmerge built by us randomly hangs on Windows when called
            # during configure, so replace it with the msgmerge from MSYS-MinGW
            # which works fine.
            build_tools_bin = os.path.join(self.config.build_tools_prefix, 'bin')
            msys_mingw_bindir = os.path.dirname(shell.which('mingw-get'))
            msys_msgmerge = os.path.join(msys_mingw_bindir, 'msgmerge.exe')
            if os.path.isfile(msys_msgmerge):
                built_msgmerge = os.path.join(build_tools_bin, 'msgmerge.exe')
                if os.path.isfile(built_msgmerge):
                    if os.path.isfile(built_msgmerge + '.bck'):
                        os.remove(built_msgmerge + '.bck')
                    os.rename(built_msgmerge, built_msgmerge + '.bck')
                shutil.copy(msys_msgmerge, build_tools_bin)
