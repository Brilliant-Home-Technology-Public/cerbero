From 923e637e94de222bd6166147b0991209ba4c6d7b Mon Sep 17 00:00:00 2001
From: Nirbheek Chauhan <nirbheek@centricular.com>
Date: Tue, 7 Aug 2018 21:03:51 +0530
Subject: [PATCH] Don't require an import library for shared modules

Shared modules may be resource-only DLLs, or might automatically
self-initialize using C constructors or WinMain at DLL load time.

When an import library is not found for a shared module, just print
a message about it instead of erroring out.
---
 mesonbuild/backend/backends.py     | 3 ++-
 mesonbuild/backend/ninjabackend.py | 3 ++-
 mesonbuild/minstall.py             | 7 +++++++
 3 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/mesonbuild/backend/backends.py b/mesonbuild/backend/backends.py
index 354d25a7..a58704ff 100644
--- a/mesonbuild/backend/backends.py
+++ b/mesonbuild/backend/backends.py
@@ -55,7 +55,7 @@ class InstallData:
         self.mesonintrospect = mesonintrospect
 
 class TargetInstallData:
-    def __init__(self, fname, outdir, aliases, strip, install_name_mappings, install_rpath, install_mode):
+    def __init__(self, fname, outdir, aliases, strip, install_name_mappings, install_rpath, install_mode, optional=False):
         self.fname = fname
         self.outdir = outdir
         self.aliases = aliases
@@ -63,6 +63,7 @@ class TargetInstallData:
         self.install_name_mappings = install_name_mappings
         self.install_rpath = install_rpath
         self.install_mode = install_mode
+        self.optional = optional
 
 class ExecutableSerialisation:
     def __init__(self, name, fname, cmd_args, env, is_cross, exe_wrapper,
diff --git a/mesonbuild/backend/ninjabackend.py b/mesonbuild/backend/ninjabackend.py
index 45ae899a..71d3b862 100644
--- a/mesonbuild/backend/ninjabackend.py
+++ b/mesonbuild/backend/ninjabackend.py
@@ -790,7 +790,8 @@ int dummy;
                             implib_install_dir = self.environment.get_import_lib_dir()
                         # Install the import library.
                         i = TargetInstallData(self.get_target_filename_for_linking(t),
-                                              implib_install_dir, {}, False, {}, '', install_mode)
+                                              implib_install_dir, {}, False, {}, '', install_mode,
+                                              optional=isinstance(t, build.SharedModule))
                         d.targets.append(i)
                 # Install secondary outputs. Only used for Vala right now.
                 if num_outdirs > 1:
diff --git a/mesonbuild/minstall.py b/mesonbuild/minstall.py
index 4615b6dd..248f12ee 100644
--- a/mesonbuild/minstall.py
+++ b/mesonbuild/minstall.py
@@ -384,6 +384,13 @@ class Installer:
 
     def install_targets(self, d):
         for t in d.targets:
+            if not os.path.exists(t.fname):
+                # For example, import libraries of shared modules are optional
+                if t.optional:
+                    print('File {!r} not found, skipping'.format(t.fname))
+                    continue
+                else:
+                    raise RuntimeError('File {!r} could not be found'.format(t.fname))
             fname = check_for_stampfile(t.fname)
             outdir = get_destdir_path(d, t.outdir)
             outname = os.path.join(outdir, os.path.basename(fname))
-- 
2.17.1

