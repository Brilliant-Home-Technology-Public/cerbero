# This file contains the default configuration to compile for iPhoneOS
# platforms. It contains sensitive enviroment configuration that
# shouldn't be modified unless you know what you are doing.
# PLEASE, DO NOT EDIT THIS FILE

import os
from cerbero.utils import shell
from cerbero.config import Architecture, DistroVersion
from cerbero.errors import FatalError

variants += ['nopython', 'notestspackage']

# We don't want anything from macports detected in configure and
# used later. System libs are passed through the -isysroot option
allow_system_libs=False

ios_min_version = ios_min_version or '10.0'

if target_distro_version == distro_version:
    target_distro_version = None

if target_arch in [Architecture.X86, Architecture.X86_64]:
    ios_platform = 'iPhoneSimulator'
else:
    ios_platform = 'iPhoneOS'

iphone_platform = '/Applications/Xcode.app/Contents/Developer/Platforms/%s.platform/Developer' % ios_platform
toolchain_path = '%s/usr/bin' % iphone_platform

# Find the installed SDK
_sdk_version = None
for d,v in [
            (DistroVersion.IOS_12_4, '12.4'),
            (DistroVersion.IOS_12_3, '12.3'),
            (DistroVersion.IOS_12_2, '12.2'),
            (DistroVersion.IOS_12_1, '12.1'),
            (DistroVersion.IOS_12_0, '12.0'),
            (DistroVersion.IOS_11_4, '11.4'),
            (DistroVersion.IOS_11_3, '11.3'),
            (DistroVersion.IOS_11_2, '11.2'),
            (DistroVersion.IOS_11_1, '11.1'),
            (DistroVersion.IOS_11_0, '11.0'),
            (DistroVersion.IOS_10_3, '10.3'),
            (DistroVersion.IOS_10_2, '10.2'),
            (DistroVersion.IOS_10_1, '10.1'),
            (DistroVersion.IOS_10_0, '10.0'),
            (DistroVersion.IOS_9_3, '9.3'),
            (DistroVersion.IOS_9_2, '9.2'),
            (DistroVersion.IOS_9_1, '9.1'),
            (DistroVersion.IOS_9_0, '9.0'),
            (DistroVersion.IOS_8_4, '8.4'),
            (DistroVersion.IOS_8_3, '8.3'),
            (DistroVersion.IOS_8_2, '8.2'),
            (DistroVersion.IOS_8_1, '8.1'),
            (DistroVersion.IOS_8_0, '8.0')]:
  sysroot = os.path.join(iphone_platform, 'SDKs', '%s%s.sdk' %(ios_platform, v))
  if os.path.exists (sysroot):
     _sdk_version = d
     break

if target_distro_version is not None and target_distro_version != _sdk_version:
    raise FatalError("The SDK for %s is not installed" % target_distro_version)
elif _sdk_version is None:
    raise FatalError("The SDK for iOS could not be found in your system")
else:
    target_distro_version = _sdk_version


ccache = use_ccache and 'ccache ' or ''
extra_cflags='-Wall -g -Os'
extra_ldflags='-Wno-error=unused-command-line-argument'
if target_arch == Architecture.ARM64:
    arch_cflags = ' -arch arm64 -pipe'
    host = 'aarch64-apple-darwin10'
elif target_arch == Architecture.ARMv7S:
    arch_cflags = ' -arch armv7s -mcpu=cortex-a9 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARMv7:
    arch_cflags = ' -arch armv7 -mcpu=cortex-a8 -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.ARM:
    arch_cflags = ' -arch armv6 -mcpu=arm1176jzf-s -pipe'
    host = 'arm-apple-darwin10'
elif target_arch == Architecture.X86:
    arch_cflags = ' -arch i386 '
    host = 'i386-apple-darwin10'
elif target_arch == Architecture.X86_64:
    arch_cflags = ' -arch x86_64 '
    host = 'x86_64-apple-darwin10'
elif target_arch == Architecture.UNIVERSAL:
    arch_cflags=''
else:
  raise FatalError("Arch %s not supported" % target_arch)

includedir = os.path.join(prefix, 'include')
if 'universal' in variants:
    lib_dir = os.path.join(prefix, target_arch, 'lib')
else:
    lib_dir = os.path.join(prefix, 'lib')

# Toolchain environment
env['CC']= 'clang'
env['CXX']= 'clang++'
extra_cflags += ' -Wno-error=format-nonliteral -Wno-error=implicit-function-declaration '

env['PATH'] = '%s:%s' % (toolchain_path, env['PATH'])
env['OBJC'] = env['CC']
env['CPP']= "%s -E" % env['CC']
env['CXXPP']= env['CPP']
env['STRIP'] = 'strip'
env['LD']= 'ld'
env['AR']= 'ar'
env['NM']= 'nm'
env['NMEDIT']= 'nmedit'
env['RANLIB']= 'ranlib'
env['CPPFLAGS'] = '{} -isysroot {} -isystem {} '.format(arch_cflags, sysroot, includedir)
env['CFLAGS'] = env['CPPFLAGS']
env['LDFLAGS'] = env['CPPFLAGS'] + ' -L{} '.format(lib_dir)
if ios_platform == 'iPhoneOS':
  env['CFLAGS'] += '-miphoneos-version-min={} '.format(ios_min_version)
  env['LDFLAGS'] += '-miphoneos-version-min={0} -Wl,-iphoneos_version_min,{0} '.format(ios_min_version)
  env['CCASFLAGS'] = '-miphoneos-version-min={} '.format(ios_min_version)
else:
  env['CFLAGS'] += '-mios-simulator-version-min={} '.format(ios_min_version)
  env['LDFLAGS'] += '-mios-simulator-version-min={0} -Wl,-ios_simulator_version_min,{0} '.format(ios_min_version)
env['CFLAGS'] += extra_cflags
env['LDFLAGS'] += extra_ldflags
env['OBJCFLAGS'] = env['CFLAGS']
env['OBJLDFLAGS'] = env['LDFLAGS']
env['CXXFLAGS'] =' -stdlib=libc++ ' +  env['CFLAGS']

env['AS']= 'as'
if target_arch in [Architecture.X86, Architecture.X86_64]:
    env.pop('GAS', None)
else:
    env['GAS']= '%s %s %s -fembed-bitcode' % ('gas-preprocessor.pl', env['CC'], env['CFLAGS'])



if use_ccache:
    env['CC'] = 'ccache  %s' % env['CC']
    env['CXX'] = 'ccache  %s' % env['CXX']

# For GLib
env['glib_cv_stack_grows'] = 'yes'
env['glib_cv_uscore'] = 'no'
env['ac_cv_func_posix_getpwuid_r'] = 'yes'
env['ac_cv_func_posix_getgrgid_r'] = 'yes'
env['gt_cv_c_wchar_t'] = 'no'
env['ac_cv_func__NSGetEnviron'] = 'no'

# For pixman
env['ac_cv_tls'] = 'none'

# Workaround for https://openradar.appspot.com/22671534 on 10.11.
env['gl_cv_func_getcwd_abort_bug'] = 'no'

moltenvk_prefix = os.path.join(home_dir, 'moltenvk')
